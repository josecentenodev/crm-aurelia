generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
    id          String    @id @default(uuid())
    name        String
    description String?
    image       String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    users       User[]
    contacts    Contact[]

    @@index([id])
}

enum UserType {
    AURELIA
    CUSTOMER
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    type          UserType     @default(CUSTOMER)
    active        Boolean      @default(true)
    image         String?
    password      String?
    clientId      String?
    client        Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade)
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    rolPerUser    RolPerUser[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Role {
    roleId      String        @id @default(uuid())
    name        String        @unique
    description String?
    moduleId    String
    rolePerUser RolPerUser[]
    taskPerRole TaskPerRole[]

    @@index([moduleId])
}

model RolPerUser {
    roleId String
    userId String
    user   User   @relation(fields: [userId], references: [id])
    role   Role   @relation(fields: [roleId], references: [roleId])

    @@unique([roleId, userId])
    @@index([userId])
}

model Task {
    taskId      String        @id @default(uuid())
    name        String
    description String?
    moduleId    String
    groupId     String
    groupTask   TaskGroup     @relation(fields: [groupId], references: [groupId])
    taskPerRole TaskPerRole[]

    @@index([groupId])
}

model TaskGroup {
    groupId     String  @id @default(uuid())
    name        String  @unique
    description String?
    moduleId    String
    task        Task[]

    @@index([moduleId])
}

model TaskPerRole {
    roleId String
    taskId String
    task   Task   @relation(fields: [taskId], references: [taskId])
    role   Role   @relation(fields: [roleId], references: [roleId])

    @@unique([roleId, taskId])
    @@index([taskId])
}

model Contact {
    id        String   @id @default(uuid())
    name      String
    email     String?  @unique
    phone     String?
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    clientId  String
    client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}
