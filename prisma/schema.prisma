generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id                 String              @id @default(uuid())
  name               String
  description        String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  statusId           String
  planId             String
  email              String?
  address            String?
  city               String?
  cp                 String?
  country            String?
  settings           Json?
  agentTemplates     AgentTemplate[]
  agentes            Agente[]
  auditLogs          AuditLog[]
  plan               ClientPlan          @relation(fields: [planId], references: [id])
  status             ClientStatus        @relation(fields: [statusId], references: [id])
  aiInfo             ClientAiInfo?       @relation("ClientToClientAiInfo")
  integrations       ClientIntegration[]
  contacts           Contact[]
  conversations      Conversation[]
  crmTasks           CrmTask[]
  notifications      Notification[]
  opportunities      Opportunity[]
  pipelines          Pipeline[]
  playgroundSessions PlaygroundSession[]
  roles              Role[]
  users              User[]

  @@index([id])
}

model ClientIntegration {
  id               String                       @id @default(uuid())
  clientId         String
  type             IntegrationType
  name             String
  description      String?
  isActive         Boolean                      @default(false)
  createdAt        DateTime                     @default(now())
  updatedAt        DateTime                     @updatedAt
  client           Client                       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  evolutionApi     EvolutionApiIntegration?
  telegramBot      TelegramBotIntegration?
  whatsappBusiness WhatsappBusinessIntegration?

  @@unique([clientId, type])
  @@index([clientId])
  @@index([type])
  @@index([isActive])
}

model EvolutionApiIntegration {
  id              String                 @id @default(uuid())
  integrationId   String                 @unique
  containerName   String?
  hostPort        Int?
  evolutionApiUrl String?
  managerUrl      String?
  apiKey          String?
  containerStatus ContainerStatus        @default(STOPPED)
  lastDeployedAt  DateTime?
  lastHealthCheck DateTime?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  instances       EvolutionApiInstance[]
  integration     ClientIntegration      @relation(fields: [integrationId], references: [id], onDelete: Cascade)
}

model EvolutionApiInstance {
  id             String                     @id @default(uuid())
  evolutionApiId String
  instanceName   String
  phoneNumber    String?                    @unique
  status         InstanceStatus             @default(DISCONNECTED)
  lastConnected  DateTime?
  lastMessageAt  DateTime?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  conversations  Conversation[]
  evolutionApi   EvolutionApiIntegration    @relation(fields: [evolutionApiId], references: [id], onDelete: Cascade)
  webhooks       EvolutionInstanceWebhook[]
  messages       Message[]

  @@unique([evolutionApiId, instanceName])
  @@index([status])
}

model EvolutionInstanceWebhook {
  id                     String               @id @default(uuid())
  evolutionApiInstanceId String
  name                   String?
  url                    String
  events                 String[]
  enabled                Boolean              @default(true)
  headers                Json?
  secret                 String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  evolutionApiInstance   EvolutionApiInstance @relation(fields: [evolutionApiInstanceId], references: [id], onDelete: Cascade)

  @@index([evolutionApiInstanceId])
  @@index([enabled])
}

model WhatsappBusinessIntegration {
  id                String            @id @default(uuid())
  integrationId     String            @unique
  businessAccountId String?
  accessToken       String?
  phoneNumberId     String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  integration       ClientIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
}

model TelegramBotIntegration {
  id            String            @id @default(uuid())
  integrationId String            @unique
  botToken      String?
  webhookUrl    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  integration   ClientIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
}

model ClientStatus {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clients     Client[]
}

model ClientPlan {
  id              String   @id @default(uuid())
  name            String
  description     String?
  maxUsers        Int      @default(0)
  maxContacts     Int      @default(0)
  maxAgents       Int      @default(0)
  maxInstances    Int      @default(0)
  costPerInstance Decimal  @default(0) @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  clients         Client[]

  @@index([id])
}

model ClientAiInfo {
  id                     String   @id @default(uuid())
  clientId               String   @unique
  projectId              String   @unique
  projectName            String
  projectCreateAt        DateTime
  serviceAccountId       String   @unique
  serviceAccountName     String
  serviceAccountCreateAt DateTime
  apiKeyId               String   @unique
  apiKeyValue            String   @unique
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  client                 Client   @relation("ClientToClientAiInfo", fields: [clientId], references: [id])

  @@index([clientId])
}

model AuditLog {
  id         String   @id @default(uuid())
  clientId   String?
  userId     String?
  action     String
  entityType String
  entityId   String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime @default(now())
  client     Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([userId])
  @@index([entityType])
  @@index([createdAt])
}

model Notification {
  id        String               @id @default(uuid())
  clientId  String
  userId    String?
  type      NotificationType     @default(INFO)
  title     String
  message   String
  read      Boolean              @default(false)
  priority  NotificationPriority @default(MEDIUM)
  category  String?
  metadata  Json?
  expiresAt DateTime?
  createdAt DateTime             @default(now())
  readAt    DateTime?
  client    Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User?                @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([userId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
}

model User {
  id                        String                      @id @default(uuid())
  name                      String?
  email                     String?                     @unique
  emailVerified             DateTime?
  type                      TipoUsuario                 @default(CUSTOMER)
  active                    Boolean                     @default(true)
  deletedAt                 DateTime?
  image                     String?
  password                  String?
  clientId                  String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime?
  accounts                  Account[]
  auditLogs                 AuditLog[]
  stageChanges              ContactStageHistory[]
  conversations             Conversation[]              @relation("UserConversations")
  conversationStatusChanges ConversationStatusHistory[] @relation("UserStatusChanges")
  ownedTasks                CrmTask[]                   @relation("CrmTaskOwner")
  readMessages              Message[]                   @relation("MessageReader")
  notifications             Notification[]
  assignedOpportunities     Opportunity[]               @relation("UserAssignedOpportunities")
  opportunityStageChanges   OpportunityStageHistory[]
  playgroundSessions        PlaygroundSession[]         @relation("UserPlaygroundSessions")
  rolPerUser                RolPerUser[]
  sessions                  Session[]
  client                    Client?                     @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  roleId      String        @id @default(uuid())
  name        String
  description String?
  clientId    String
  rolePerUser RolPerUser[]
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  taskPerRole TaskPerRole[]

  @@unique([clientId, name])
  @@index([clientId])
}

model RolPerUser {
  roleId String
  userId String
  role   Role   @relation(fields: [roleId], references: [roleId])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([roleId, userId])
  @@index([userId])
}

model Task {
  taskId      String        @id @default(uuid())
  name        String
  description String?
  groupId     String
  groupTask   TaskGroup     @relation(fields: [groupId], references: [groupId])
  taskPerRole TaskPerRole[]

  @@index([groupId])
}

model TaskGroup {
  groupId     String  @id @default(uuid())
  name        String  @unique
  description String?
  task        Task[]
}

model TaskPerRole {
  roleId String
  taskId String
  role   Role   @relation(fields: [roleId], references: [roleId])
  task   Task   @relation(fields: [taskId], references: [taskId])

  @@unique([roleId, taskId])
  @@index([taskId])
}

model Contact {
  id            String                @id @default(uuid())
  name          String
  email         String?               @unique
  phone         String?
  message       String?
  status        ContactStatus         @default(NUEVO)
  channel       ContactChannel        @default(WHATSAPP)
  channelId     String?
  lastChannel   String?
  lastInstance  String?
  source        String?
  tags          String[]
  notes         String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  clientId      String
  pipelineId    String?
  stageId       String?
  client        Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  pipeline      Pipeline?             @relation("ContactPipeline", fields: [pipelineId], references: [id])
  stage         PipelineStage?        @relation("ContactStage", fields: [stageId], references: [id])
  stageHistory  ContactStageHistory[]
  conversations Conversation[]
  relatedTasks  CrmTask[]             @relation("CrmTaskContact")
  opportunities Opportunity[]

  @@index([clientId])
  @@index([pipelineId])
  @@index([stageId])
  @@index([channelId])
}

model Conversation {
  id                  String                      @id @default(uuid())
  title               String?
  status              ConversationStatus          @default(ACTIVA)
  type                ConversationType            @default(LEAD)
  contactId           String
  agentId             String?
  assignedUserId      String?
  channel             ContactChannel              @default(WHATSAPP)
  channelInstance     String?
  evolutionInstanceId String?
  lastMessageAt       DateTime?
  lastReadAt          DateTime?
  lastReadMessageId   String?
  unreadCount         Int                         @default(0)
  metadata            Json?
  clientId            String
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  aiConversationId    String?
  isAiActive          Boolean                     @default(false)
  isImportant         Boolean                     @default(false)
  agent               Agente?                     @relation(fields: [agentId], references: [id])
  assignedUser        User?                       @relation("UserConversations", fields: [assignedUserId], references: [id])
  client              Client                      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  contact             Contact                     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  evolutionInstance   EvolutionApiInstance?       @relation(fields: [evolutionInstanceId], references: [id])
  lastReadMessage     Message?                    @relation("ConversationLastRead", fields: [lastReadMessageId], references: [id])
  statusHistory       ConversationStatusHistory[]
  relatedTasks        CrmTask[]                   @relation("CrmTaskConversation")
  messages            Message[]

  @@index([evolutionInstanceId])
  @@index([clientId, unreadCount])
  @@index([lastMessageAt])
}

model ConversationStatusHistory {
  id             String              @id @default(uuid())
  conversationId String
  fromStatus     ConversationStatus?
  toStatus       ConversationStatus
  changedById    String
  reason         String?
  metadata       Json?
  createdAt      DateTime            @default(now())
  changedBy      User                @relation("UserStatusChanges", fields: [changedById], references: [id])
  conversation   Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([changedById])
}

model Pipeline {
  id            String          @id @default(uuid())
  clientId      String
  name          String
  description   String?
  isDefault     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  contacts      Contact[]       @relation("ContactPipeline")
  opportunities Opportunity[]   @relation("OpportunityPipeline")
  client        Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  stages        PipelineStage[]

  @@unique([clientId, name])
  @@index([clientId])
}

model PipelineStage {
  id                     String                    @id @default(uuid())
  pipelineId             String
  name                   String
  order                  Int
  color                  String?
  slaMinutes             Int?
  isWon                  Boolean                   @default(false)
  isLost                 Boolean                   @default(false)
  contacts               Contact[]                 @relation("ContactStage")
  historyFrom            ContactStageHistory[]     @relation("FromStage")
  historyTo              ContactStageHistory[]     @relation("ToStage")
  opportunities          Opportunity[]             @relation("OpportunityStage")
  opportunityHistoryFrom OpportunityStageHistory[] @relation("FromOpportunityStage")
  opportunityHistoryTo   OpportunityStageHistory[] @relation("ToOpportunityStage")
  pipeline               Pipeline                  @relation(fields: [pipelineId], references: [id], onDelete: Cascade)

  @@unique([pipelineId, name])
  @@index([pipelineId, order])
}

model ContactStageHistory {
  id          String         @id @default(uuid())
  contactId   String
  fromStageId String?
  toStageId   String
  changedById String?
  reason      String?
  createdAt   DateTime       @default(now())
  changedBy   User?          @relation(fields: [changedById], references: [id])
  contact     Contact        @relation(fields: [contactId], references: [id], onDelete: Cascade)
  fromStage   PipelineStage? @relation("FromStage", fields: [fromStageId], references: [id])
  toStage     PipelineStage  @relation("ToStage", fields: [toStageId], references: [id])

  @@index([contactId, createdAt])
}

model Opportunity {
  id                String                    @id @default(uuid())
  title             String
  amount            Decimal?                  @db.Decimal(12, 2)
  currency          String?
  probability       Int?
  status            OpportunityStatus         @default(OPEN)
  source            String?
  description       String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  clientId          String
  contactId         String
  assignedUserId    String?
  pipelineId        String?
  stageId           String?
  actualCloseDate   DateTime?
  expectedCloseDate DateTime?
  relatedTasks      CrmTask[]                 @relation("CrmTaskOpportunity")
  assignedUser      User?                     @relation("UserAssignedOpportunities", fields: [assignedUserId], references: [id])
  client            Client                    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  contact           Contact                   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  pipeline          Pipeline?                 @relation("OpportunityPipeline", fields: [pipelineId], references: [id])
  stage             PipelineStage?            @relation("OpportunityStage", fields: [stageId], references: [id])
  stageHistory      OpportunityStageHistory[]

  @@index([clientId])
  @@index([contactId])
  @@index([pipelineId])
  @@index([stageId])
  @@index([assignedUserId])
}

model OpportunityStageHistory {
  id            String         @id @default(uuid())
  opportunityId String
  fromStageId   String?
  toStageId     String
  changedById   String?
  reason        String?
  createdAt     DateTime       @default(now())
  changedBy     User?          @relation(fields: [changedById], references: [id])
  fromStage     PipelineStage? @relation("FromOpportunityStage", fields: [fromStageId], references: [id])
  opportunity   Opportunity    @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  toStage       PipelineStage  @relation("ToOpportunityStage", fields: [toStageId], references: [id])

  @@index([opportunityId, createdAt])
}

model Message {
  id                     String                @id @default(uuid())
  conversationId         String
  content                String
  role                   MessageRole
  senderId               String?
  senderName             String?
  senderType             MessageSenderType?
  whatsappId             String?
  messageType            MessageType?
  messageSubType         String?
  messageStatus          MessageStatus?
  sentAt                 DateTime?
  deliveredAt            DateTime?
  readStatus             MessageReadStatus     @default(UNREAD)
  readAt                 DateTime?
  readByUserId           String?
  evolutionInstanceId    String?
  source                 String?
  metadata               Json?
  mediaUrl               String?
  mediaFileName          String?
  mediaSize              Int?
  mediaDuration          Int?
  mediaWidth             Int?
  mediaHeight            Int?
  mediaThumbnail         String?
  caption                String?
  title                  String?
  description            String?
  latitude               Float?
  longitude              Float?
  locationName           String?
  contactName            String?
  contactPhone           String?
  reaction               String?
  pollOptions            String[]
  pollResults            Json?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  rating                 Int?
  feedback               String?
  conversationAsLastRead Conversation[]        @relation("ConversationLastRead")
  conversation           Conversation          @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  evolutionInstance      EvolutionApiInstance? @relation(fields: [evolutionInstanceId], references: [id])
  readByUser             User?                 @relation("MessageReader", fields: [readByUserId], references: [id])

  @@unique([conversationId, whatsappId])
  @@index([conversationId, createdAt])
  @@index([readStatus])
  @@index([messageStatus])
  @@index([messageType])
  @@index([evolutionInstanceId])
}

model AgentTemplate {
  id          String              @id @default(uuid())
  name        String
  description String?
  category    String?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  clientId    String?
  isGlobal    Boolean             @default(false)
  client      Client?             @relation(fields: [clientId], references: [id], onDelete: Cascade)
  steps       AgentTemplateStep[]
  agentes     Agente[]
}

model AgentTemplateStep {
  id          String        @id @default(uuid())
  templateId  String
  name        String
  description String?
  icon        String
  order       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  fields      AgentField[]
  template    AgentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId, order])
}

model AgentField {
  id       String            @id @default(uuid())
  stepId   String
  name     String
  label    String
  type     FieldType
  required Boolean           @default(false)
  options  String[]
  order    Int
  config   Json?
  step     AgentTemplateStep @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@index([stepId, order])
}

model Agente {
  id                     String              @id @default(uuid())
  name                   String
  templateId             String
  customFields           Json
  isActive               Boolean             @default(true)
  isPrincipal            Boolean             @default(false)
  isLeadAgent            Boolean             @default(false)
  conversationsThisMonth Int                 @default(0)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  clientId               String
  aiMaxOutputTokens      Int?
  aiModel                String?
  aiPrompt               String?
  aiTemperature          Float?
  aiTopP                 Float?
  description            String?
  client                 Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  template               AgentTemplate       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  conversations          Conversation[]
  playgroundSessions     PlaygroundSession[]
}

model GlobalIntegration {
  id             String          @id @default(uuid())
  type           IntegrationType @unique
  name           String
  description    String?
  icon           String?
  isActive       Boolean         @default(true)
  isConfigurable Boolean         @default(true)
  backendUrl     String?
  apiKey         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([type])
  @@index([isActive])
}

model PlaygroundSession {
  id               String              @id @default(uuid())
  agentId          String
  clientId         String
  userId           String
  status           PlaygroundStatus    @default(ACTIVE)
  lastMessageAt    DateTime?
  metadata         Json?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  aiConversationId String?
  messages         PlaygroundMessage[]
  agent            Agente              @relation(fields: [agentId], references: [id], onDelete: Cascade)
  client           Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user             User                @relation("UserPlaygroundSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([clientId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model PlaygroundMessage {
  id         String                       @id @default(uuid())
  sessionId  String
  content    String
  role       PlaygroundMessageRole
  senderId   String?
  senderName String?
  senderType PlaygroundMessageSenderType?
  metadata   Json?
  createdAt  DateTime                     @default(now())
  updatedAt  DateTime                     @updatedAt
  rating     Int?
  feedback   String?
  session    PlaygroundSession            @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([role])
  @@index([createdAt])
}

model CrmTask {
  id                    String          @id @default(uuid())
  title                 String
  description           String?
  status                CrmTaskStatus   @default(PENDING)
  priority              CrmTaskPriority @default(MEDIUM)
  dueDate               DateTime?
  ownerId               String
  relatedContactId      String?
  relatedConversationId String?
  relatedOpportunityId  String?
  clientId              String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  client                Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  owner                 User            @relation("CrmTaskOwner", fields: [ownerId], references: [id])
  relatedContact        Contact?        @relation("CrmTaskContact", fields: [relatedContactId], references: [id])
  relatedConversation   Conversation?   @relation("CrmTaskConversation", fields: [relatedConversationId], references: [id])
  relatedOpportunity    Opportunity?    @relation("CrmTaskOpportunity", fields: [relatedOpportunityId], references: [id])

  @@index([clientId])
  @@index([ownerId])
  @@index([status])
  @@index([dueDate])
  @@index([relatedContactId])
  @@index([relatedConversationId])
  @@index([relatedOpportunityId])
}

enum ContainerStatus {
  RUNNING
  STOPPED
  ERROR
  DEPLOYING
  MAINTENANCE
}

enum InstanceStatus {
  DISCONNECTED
  CONNECTING
  CONNECTED
  ERROR
  MAINTENANCE
}

enum IntegrationType {
  EVOLUTION_API
  WHATSAPP_BUSINESS
  TELEGRAM_BOT
  EMAIL_SMTP
  SMS_TWILIO
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SYSTEM
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TipoUsuario {
  AURELIA
  ADMIN
  CUSTOMER
}

enum ContactStatus {
  NUEVO
  CALIFICADO
  AGENDADO
  CLIENTE
  DESCARTADO
}

enum ContactChannel {
  WHATSAPP
  INSTAGRAM
  FACEBOOK
  WEB
  EMAIL
  TELEFONO
}

enum ConversationStatus {
  ACTIVA
  PAUSADA
  FINALIZADA
  ARCHIVADA
}

enum ConversationType {
  LEAD
  CLIENTE
  SOPORTE
}

enum OpportunityStatus {
  OPEN
  WON
  LOST
  ARCHIVED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  STICKER
  LOCATION
  CONTACT
  REACTION
  POLL
  BUTTON
  LIST
  TEMPLATE
  UNKNOWN
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum MessageSenderType {
  CONTACT
  AGENT
  USER
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
  PENDING
  ACK
  ACK_DEVICE
  ACK_READ
  ACK_READ_DEVICE
  ACK_PENDING
  ACK_SERVER
  ACK_UNSENT
  ACK_ERROR
  ACK_OFFLINE
  ACK_PLAYED
  ACK_PLAYED_DEVICE
}

enum MessageReadStatus {
  UNREAD
  READ
}

enum FieldType {
  TEXT
  TEXTAREA
  NUMBER
  EMAIL
  SELECT
  MULTISELECT
  CHECKBOX
  RADIO
  DATE
  JSON
}

enum PlaygroundStatus {
  ACTIVE
  PAUSED
  FINISHED
  ARCHIVED
}

enum PlaygroundMessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum PlaygroundMessageSenderType {
  USER
  AGENT
}

enum CrmTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum CrmTaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
